#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8

'''
  Database manager
  ----------------

  Fetch and store quotes data. The --universe parameter works like the one in
  Intuition configuration.

  :copyright (c) 2014 Xavier Bruhiere.
  :license: Apache 2.0, see LICENSE for more details.
'''


import sys
import argparse
from clint.textui import puts, colored, indent
import pytz
import datetime as dt
import dna.debug
import dna.time_utils
import intuition.data.universe as universe
from insights.plugins.database import RethinkdbFinance
from intuition.data.quandl import DataQuandl
import intuition.data.ystockquote as ystockquote


def parse_cli():
    parser = argparse.ArgumentParser(
        description='Intuition-db, quotes database manager')
    parser.add_argument('-V', '--version',
                        action='version',
                        version='%(prog)s v0.0.1 Licence Apache 2.0',
                        help='Print program version')
    parser.add_argument('command', type=str,
                        help='command [dl, sync]')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='Print logs on stdout')
    parser.add_argument('-u', '--universe',
                        action='store', required=True,
                        help='market universe to evaluate')
    parser.add_argument('-s', '--start',
                        action='store', default='2011-01-01',
                        help='start date for quotes')
    parser.add_argument('-e', '--end',
                        action='store', default=dt.date.today(),
                        help='end date for quotes')
    parser.add_argument('-b', '--backend',
                        action='store', default='rethinkdb',
                        help='database backend to use for storage')
    return parser.parse_args()


def msg(body, indentation=2):
    with indent(indentation, 'info | '):
        puts(colored.blue(body))


def warning(body, indentation=2):
    with indent(indentation, 'warn | '):
        puts(colored.red(body))


# TODO Move it to intuition.data
def fill_stock_metadata(sid):
    metadata = {}
    try:
        metadata['name'] = ystockquote.get_company_name(sid)
    except Exception, error:
        print(error)
        sys.exit(warning('sometimes it just times out, retry later'))
    metadata['exchange'] = ystockquote.get_stock_exchange(sid)
    if metadata['exchange'].find('Nasdaq') > 0:
        # It returns NasdaqNM
        metadata['exchange'] = 'Nasdaq'
    metadata['type'] = ystockquote.get_type(sid)
    metadata['revenue'] = ystockquote.get_revenue(sid)
    #FIXME Almost never found
    #metadata['index'] = ystockquote.get_indices(sid)
    metadata['sector'] = ystockquote.get_sector(sid)
    metadata['industry'] = ystockquote.get_industry(sid)

    msg('successfully fetched metadata about {}'.format(sid))
    msg(dna.debug.emphasis(metadata))
    return metadata


class DatabaseManager(object):

    def __init__(self, db='quotes'):
        msg('using {} backend for storage'.format('Rethinkdb'))
        self.db = RethinkdbFinance(db=db)

        msg('using {} as data provider'.format('quandl.com'))
        self.feed = DataQuandl()

    def _store(self, sid, data):
        if not data.isnull().any().any():
            msg('saving {} in database'.format(sid))
            self.db.save_quotes(sid, data, {}, reset=self.reset)
        else:
            warning('{}: empty dataset'.format(sid))

    def fill_database(self, sids, start, end):
        if isinstance(end, str):
            start = dna.time_utils.normalize_date_format(start)
        if isinstance(end, str):
            end = dna.time_utils.normalize_date_format(end)
        self.reset = True
        self._download_and_store(sids, start, end)

    def sync(self, sids, start, end):
        # TODO Per quote sync
        younger_date = dt.datetime(3020, 1, 1, tzinfo=pytz.utc)
        for sid in sids:
            last_entry = self.db.last_chrono_entry(sid)
            if last_entry['date'] < younger_date:
                younger_date = last_entry['date']

        start = younger_date + dt.timedelta(1)
        end = dt.date.today()
        self.reset = False

        msg('downloading {} data ({} -> {})'.format(sids, start, end), 4)
        self._download_and_store(sids, start, end)

    def _download_and_store(self, sids, start, end):
        data = self.feed.fetch(
            sids, start=start, end=end, returns='pandas')
        msg('done')

        for sid in data:
            try:
                self._store(sid=sid, data=data[sid])
            except Exception as error:
                print(error)
                continue


def main():
    msg('- Intuition database manager')
    warning('Only supports cac40 and forex symbols', 4)
    warning('Only supports rethinkdb backend')

    args = parse_cli()

    market = universe.Market()
    market.parse_universe_description(args.universe)
    sids = market.sids

    db_manager = DatabaseManager()

    if args.command == 'dl':
        db_manager.fill_database(sids, args.start, args.end)
    elif args.command == 'sync':
        db_manager.sync(sids, args.start, args.end)
    else:
        raise ValueError('unknown command: {}'.format(args.command))
    msg('done')


if __name__ == '__main__':
    sys.exit(main())
