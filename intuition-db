#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8

'''
  Database manager
  ----------------

  Fetch and store quotes data. The --universe parameter works like the one in
  Intuition configuration.

  :copyright (c) 2014 Xavier Bruhiere.
  :license: Apache 2.0, see LICENSE for more details.
'''


import sys
import argparse
from clint.textui import puts, colored, indent
from datetime import datetime

import dna.debug
from insights.plugins.database import RethinkdbBackend
import intuition.data.utils as datautils
import intuition.utils
from intuition.data.quandl import DataQuandl
import intuition.data.ystockquote as ystockquote


def parse_cli():
    parser = argparse.ArgumentParser(
        description='Intuition-db, quotes database manager')
    parser.add_argument('-V', '--version',
                        action='version',
                        version='%(prog)s v0.0.1 Licence Apache 2.0',
                        help='Print program version')
    parser.add_argument('command', type=str,
                        help='command [dl, sync]')
    parser.add_argument('-v', '--verbose',
                        action='store_true',
                        help='Print logs on stdout')
    parser.add_argument('-u', '--universe',
                        action='store', required=True,
                        help='market universe to evaluate')
    parser.add_argument('-s', '--start',
                        action='store', default='2011-01-01',
                        help='start date for quotes')
    parser.add_argument('-e', '--end',
                        action='store', default=datetime.today(),
                        help='end date for quotes')
    parser.add_argument('-b', '--backend',
                        action='store', default='rethinkdb',
                        help='database backend to use for storage')
    return parser.parse_args()


def msg(body, indentation=2):
    with indent(indentation, 'info | '):
        puts(colored.blue(body))


def warning(body, indentation=2):
    with indent(indentation, 'warn | '):
        puts(colored.red(body))


def fill_stock_metadata(sid):
    metadata = {}
    try:
        metadata['name'] = ystockquote.get_company_name(sid)
    except Exception, error:
        print(error)
        sys.exit(warning('sometimes it just times out, retry later'))
    metadata['exchange'] = ystockquote.get_stock_exchange(sid)
    if metadata['exchange'].find('Nasdaq') > 0:
        # It returns NasdaqNM
        metadata['exchange'] = 'Nasdaq'
    metadata['type'] = ystockquote.get_type(sid)
    metadata['revenue'] = ystockquote.get_revenue(sid)
    #FIXME Almost never found
    #metadata['index'] = ystockquote.get_indices(sid)
    metadata['sector'] = ystockquote.get_sector(sid)
    metadata['industry'] = ystockquote.get_industry(sid)

    msg('successfully fetched metadata about {}'.format(sid))
    msg(dna.debug.emphasis(metadata))
    return metadata


def store(data, backend):
    msg('using {} backend for storage'.format(backend))
    db = RethinkdbBackend(db='quotes')
    #TODO remove .pa and indicate markets
    for sid in data:
        # Rethinkdb doesn't accept '.' in table names
        dot_position = sid.find('.')
        if dot_position > 0:
            symbol = sid[:dot_position].lower()
        else:
            symbol = sid.lower()

        try:
            # name, exchange, index, sector, industry
            msg('searching for {} metadata'.format(sid))
            metadata = fill_stock_metadata(sid)
            msg('saving {} in database'.format(sid))
            if not data[sid].isnull().any().any():
                db.save_quotes(symbol, data[sid], metadata, reset=True)
        except Exception as error:
            print(error)
            continue
    msg('done')


def main():
    args = parse_cli()

    sids = datautils.smart_selector(args.universe)

    start = intuition.utils.normalize_date_format(args.start)
    if isinstance(args.end, str):
        end = intuition.utils.normalize_date_format(args.end)
    else:
        end = args.end

    msg('- Intuition database manager')

    #TODO sync (i.e. start = detect_db(), end = now())

    #TODO Fetch more informations
    if args.command == 'dl':
        warning('currently only supports nasdaq symbols', 4)
        msg('downloading {} data ({} -> {})'.format(sids, start, end), 4)
        feed = DataQuandl()
        data = feed.fetch(
            sids, start_date=start, end_date=end, returns='pandas')
        msg('done')

        store(data, args.backend)

    elif args.command == 'sync':
        raise NotImplementedError('yet ...')
    else:
        raise ValueError('unknown command: {}'.format(args.command))


if __name__ == '__main__':
    sys.exit(main())
